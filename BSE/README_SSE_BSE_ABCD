
******************************************************************************************

          ---------------------------------------------------------------
          | Standalone SSE / BSE from Nbody6++GPU - Nbody6++GPU-BSE-SSE |
          ---------------------------------------------------------------

                              Last update:  12.08.2020

******************************************************************************************
	

Following discussions with Mirek, Rainer, Peter, Diogo, Jarrod, Agostino
myself and others at the end of July 2020.

In the midst of comparing MOCCA and Nbody6++GPU simulations with a particular
focus on the stellar evolution, many differences emerged with respect to subtle
updates and general overarching stellar evolution recipes that were undocumented
and previously not filtered out even though there were meetings upon meetings
happening in autumn of 2019 on this particular aspect of both codes. 

Following this realisation, there was an urgent need to 'stream-line' and synchronise
the stellar evolution recipes and parameter choices in both MOCCA and Nbody6++GPU in 
order to allow for proper simulation comparability.
However, while MOCCA has an implementation of SSE and BSE, which is very much in line
with the original Hurley code, Nbody6++GPU has many variations and extra subroutines.
Unfortunately, a standalone BSE and SSE of Nbody6++GPU acting as a plain mirror of just
the stellar evolution was never developed nor maintained. 
Therefore, there existed until the development of this code no way to just compare
the stellar evolution recipes of both MOCCA and Nbody6++GPU with no dynamics involved. 

The aim of this project is manifold. We want to:

a) properly document the stellar evolution recipes available in Nbody6++GPU and 
   MOCCA to serve as a quick and easy 'look-up' resource for the astrophysics community,
b) access reliable comparisons between MOCCA and Nbody6++GPU, where the dynamical treatment
   remains the only source of uncertainty and NOT the stellar evolution treatment,
b) implement up-to-date BSE and SSE in McLuster which is a mirror of Nbody6++GPU and 
   MOCCA in order to set up initial star clusters with multiple stellar populations that can 
   be dynamically evolved afterwards,
c) allow for direct and quick comparisons with pure population synthesis codes, such as ASPS,
   MOBSE, STARTRACK and others,
d) develop and maintain our own stellar evolution recipes, which is much quicker,
   cost-efficient and reliable with this standalone SSE / BSE. 
e) develop and document levels of stellar evolution A, B, C and D:

   i)    A - Old and outdated 2015 / 2016 Dragon simulation stellar evolution recipes,
             which should NOT be used anymore in future simulations. 
   ii)   B - Extensively tested stellar evolution that may be used without worry,
             but might become outdated at some point and move into level A.
   iii)  C - Recipes that are available and undergo testing and will move into level B
             with the consent of the group.
   iv)   D - Future and extremely experimental stellar evolution recipes that we want to 
             implement soon in Nbody6++GPU and/or MOCCA.

    These levels will make it easier for us to communicate and differentiate between the 
	stellar evolution recipes that we use, which are growing in number and variety every
	year...
   
Many more exciting projects will most likely be possible with this code in the future. 

We hope that this code will make our research more transparent and convenient.

Albrecht Kamlah, Heidelberg 04.08.2020


******************************************************************************************

To run the code, you can either chose to evolve a single star (SSE) or a binary (BSE). 
The original README files by Jarrod Hurley may be found at the end of this document.

Please proceed as follows:

	  ----------------------------------------------------------------------------
	  
a) SSE (sse.f, const_bse.h, deltat.f, evolv1.f, single.in, hrdiag.f, kick.f, mlwind.f,
        mrenv.f, ran3.f, star.f, zcnsts.f, zdata.h, zfuncs.f, Makefile)
		
  Needs f77 compiler.
  
  1. Type    make clean; make sse    to compile.
  2. Edit single.in file with input parameters, for example: 
      
      mass z tphysf                   100.0 0.0001 10000.0
      neta bwind hewind disp          0.5 0.0 0.5 265.0
      ifflag wdflag bhflag nsflag     0 1 1 3
      psflag ecflag mdflag kmech      1 1 3 3
      mxns idum                       3.0 999
      pts1 pts2 pts3                  0.05 0.01 0.02
	   
  3. Type ./sse
  4. You get the an output file called single.dat, which contains the columns
     detailing the evolution of the single star: 
     
	 Tev(Myr), type, Mo, Mt, log10(L), log10(R), log10(Teff), Mc, Menv, epoch, spin
	  
	  ----------------------------------------------------------------------------
	 
b) BSE (bse.f, const_bse.h, evolv2.f, binary.in, comenv.f, corerd.f, deltat.f, dgcore.f,
         gntage.f, hrdiag.f, instar.f, kick.f, mix.f, mlwind.f, mrenv.f, ran3.f, rl.f, 
		 star.f, zconst.f, zdata.f, zfuncs.f, Makefile)
		
  Needs f77 compiler.
 
  1. Type    make clean; make bse    to compile.
  2. Edit binary.in file with input parameters, for example: 
  
      mass0(1) mass0(2) tphysf tb kstar(1) kstar(2) z ecc   100.0 100.0 20000. 10000.0 1 1 0.0001 0.5
      neta bwind hewind alpha lambda                        0.5 0.0 1.0 3.0 0.5
      ceflag tflag ifflag wdflag bhflag nsflag mxns idum    0 1 0 1 1 3 3.0 29769
      psflag ecflag mdflag kmech                            1 1 3 3
      pts1 pts2 pts3                                        0.05 0.01 0.02
      disp beta xi acc2 epsnov eddfac gamma                 265.0 0.125 1.0 1.5 0.001 10.0 -1.0

  3. Type ./bse
  4. You get the an output file called binary.dat, which contains the columns with
     (1) = binary member 1, (2) = binary member 2:
  
      Tev(Myr), type(1)/(2), Mo(1)/(2), Mc(1)/(2), log10(R)(1)/(2), log10(L)(1)/(2),
	  spin(1)/(2), Semi-major axis, eccentricity   ????????
******************************************************************************************
                                     ----------------------------------------
                                     | INPUT PARAMETERS - SSE AND BSE INPUT |
                                     ----------------------------------------
									 
1.  mass, mass0(1), mass0(2) - Mass single star, mass bin. member 1,
                               mass bin. member 2: 0.01 =< mass =< 100 M*								 
2.  z - metallicity:  0.0001 =< z =< 0.03 (0.02 is solar) 		
3.  kstar(1), kstar(2) - Initial stellar types of binary members						

4.  tphysf  - physical time in Myr up to which we want to evolve 
5.  neta    - Reimers mass-loss coefficient for giant winds
            = 0.5: [Kudritzki & Reimers (1978)]
	    = 0.477: [McDonald & Zijlstra (2015)]
            = -0.172: [Schröder & Cuntz (2005)] 
6.  bwind   - Companion-enhanced mass-loss factor
7.  hewind  - factor to control the amount of He star mass-loss	[Hurley et al. (2000)] 
8.  disp    - Dispersion in a Maxwellian velocity distribution for kick distributions (WDs,NSs,BHs)
            = 190 km/s following [Hobbs et al. (2005)]
            = 265 km/s following [Belczynski et al. (2008)]			
9.  ifflag  - Mass of a WD (IFMR):
            = 0: use the mass that results from the evolution algorithm (core-mass growth vs. envelope mass-loss)
            = 1: IFMR following [Han et al. (1995)]
10. wdflag  - Choices for how the white dwarfs are cooled
            = 0: standard Mestel cooling [Mestel (1952)]
	´   = 1: modified Mestel cooling [Hurley & Shara (2003)]
11. bhflag  - BH kicks and natal spins, same as for CC NSs but reduced for momentum cons. if fallback
            = 0: no BH kick.
	    = 1: same as for the regular NSs but scaled by fallback. 
	    = 2: Fallback as bhflag= 1 + BH Kerr Metric spin parameter - MESA models [Belczynski et al. (2020)]
            = 3: Fallback as bhflag= 1 + BH Kerr Metric spin parameter - Geneva models [Belczynski et al. (2020)]
12. nsflag  - Choices for how NS/BH masses are calculated
            = 0: Original remnant masses [Hurley et al. (2000)]
	    = 1: FeNi core mass [Belczynski et al. (2002)]
	    = 2: FeNi core mass [Belczynski et al. (2008)]
	    = 3: Rapid SNe [Fryer et al. (2012)]
	    = 4: Delayed SNe [Fryer et al. (2012)]
13. psflag  - No, strong, weak or moderate P(I)SNe / PP(I)SNe
            = 0: No P(I)SNe / PP(I)SNe
	    = 1: Strong P(I)SNe / PP(I)SNe [Belczynski et al. (2016)]
	    = 2: Moderate P(I)SNe / PP(I)SNe [Leung et al. (2019)]
	    = 3: Weak P(I)SNe / PP(I)SNe [Leung et al. (2019)]
            = 4: SEVN correction [Spera & Mappeli (2017)]
14. ecflag  - Enables or disables ECSNe
            = 0: No ECSNe
	    = 1: Enables ECSNe [Belczynski et al. (2008)]
15. mdflag  - Sets the wind mass-loss prescription
	    = 1: original [Hurley et al. (2000)]
	    = 2: SSE + LBV added [Hurley et al. (2000), Humphreys & Davidson (1994)]
	    = 3: updates from [Belczynski et al. (2010)]
            = 4: 3, but without bi-stability jump [Belczynski et al. (2010)]
	    = 5: [Giacobbo et al. (2018)] (Level D)
16. ceflag  - Activates or deactivates spin-energy correction in common-envelopede Kool (or Podsiadlowski)
            > 0: activates spin-energy correction in common-envelope
	    = 3: de Kool (or Podsiadlowski) model [de Kool (1990)] 
17. tflag   - activates or deactivates tidal circularisation
            = 0: no tidal circularisation
	    = 1: tidal circularisation [Hurley et al. (2002)] 
18. kmech   - Kick mechanism for NSs and BHs [Fryer suggestions at around 2018]
            = 1: standard momentum-conserving
	    = 2: convection-asymmetry-driven
	    = 3: collapse-asymmetry-driven
	    = 4:  neutrino-driven
19. mxns    - maximum NS mass depending on which NS mass prescription is used [Fryer et al. (2012)]
20. idum    - Number of random number generator
21. pts1    - fraction of stellar lifetimes in the main sequence --> time-step for that phase [Banerjee et al. (2019)]
22. pts2    - fraction of stellar lifetimes in the sub-giant --> time-step for that phase [Banerjee et al. (2019)]
23. pts3    - fraction of stellar lifetimes in the more evolved phases --> time-step for that phase [Banerjee et al. (2019)]
24. tb      - binary period in years
25. ecc     - binary eccentricity 

NB.: The following important parameters are set in the routines AND NOT in the single.in and binary.in files:

1.  WDSIG1  - 2.0 km/s [Fellhauer et al. (2003)]
2.  WDSIG2  - 2.0 km/s [Fellhauer et al. (2003)]
3.  WDKMAX  - 6.0 km/s [Fellhauer et al. (2003)]
4.  ECSIG   - 3.0 km/s [Gessner & Janka (2018)]
5.  CONVF   - 5.0 - Convective boost factor larger CO core masses 
                  (Convection-asymmetry driven kick) 2 =< CONVF =< 10 
6.  MNUEFF  - 7.0 M* - effective remnant mass beyond which the neutrino emission does not 
                       enhance significantly as the remnant (baryonic) mass is increased 
	               (Neutrino-driven driven kick) 5 M* =< MNUEFF =< 10 M* 
7.  MNSTYP  - 1.4 M* - typical mass of a neutron star with the input dispersion velocity 'disp'
				
******************************************************************************************
*         SOURCES AND LITERATURE LIST - 2020 SSE / BSE  - last updated 11.08.2020        *      
******************************************************************************************                                                               
* Banerjee S., Belczynski K., Fryer C. et. al. (2019, A&A, arXiv:1902.07718)         
* Belczynski K., Kalogera V., Bulik T. (2002, ApJ, 572, 407-)                         
* Belczynski K., Kalogera V., Rasio F. A. (2008, ApJ Supplement Series,174, 223-)     
* Belczynski K., Bulik T., Fryer C. L. et al. (2010, ApJ, 714, 1217-)                 
* Belczynski K., Heger A., Gladysz W. (2016, A&A, 594, A97, 10-) 
* Belczynski K., Klencki J., Fields C. E. et al. (2020, A&A, 636, 40-)
* Belloni D., Zorotovic M., Schreiber M. R. et al. (2017, MNRAS, 468, 2429-)
* Belloni D., Schreiber M. R., Zorotovic M. et al. (2018, MNRAS, 478, 5626-)
* Boffin H. M. J. & Jorissen A. (1988, A&A, 205, 155-)
* Campbell C. G. (1984, MNRAS, 207, 433-) 
* Chen Y., Bressan A., Girardi L. et al. (2015, MNRAS, 452, 1068-)
* Claeys J. S. W., Pols O. R., Izzard R. G. et al., (2014, A&A, 563, A83)
* de Kool M. (1990, ApJ, 358, 189-)   
* Dewi J. S. M. & Tauris T. M. (2000 A&A, 360, 1043-)                      
* Eldrige J. J. & Tout C. A. (2004, MNRAS, 353, 87-)
* Fellhauer et al. (2003, ApJ, 595, L53)                                  
* Fryer C. L., Belczynski K., Wiktorowicz, G. et al. (2012, ApJ, 749, 91,1-)
* Gessner A. & Janka H. T. (2018, ApJ, 865, 20-) 
* Giacobbo et al. (2018, MNRAS, 474, 2959–) 
* Graefener G., Vink J. S., de Koter A. et al. (2011, A&A, 535, 14-)         
* Hamann W. R. & Koesterke L. (1998, A&A, 335, 1003-) 
* Han Z., Podsiadlowski P. & Eggleton P. P. (1995, MNRAS, 272, 800-)  
* Hjellming M. S. & Webbink R. F. (1987, ApJ, 318, 794-)     
* Hobbs G., Lorimer D. R., Lyne A. G. et al. (2005, MNRAS, 360, 974–)                 
* Humphreys R. M. & Davidson K. (1979, ApJ, 232, 409–)     
* Humphreys R. M. & Davidson K. (1994, PASP, 106, 1025-)                                
* Hurley J. R., Pols, O. R., & Tout, C. A. (2000, MNRAS, 315, 543-)     
* Hurley J. R., Tout C. A., Pols O. R. et al. (2002, MNRAS, 329, 897-)  
* Hurley J. R. & Shara M. M. (2003, ApJ, 589, 179-)
* Hut P. (1981, A&A, 99, 126-)
* Ivanova N., Justham S., Chen X. et al. (2013, A&A Review, 59-)     
* King A. R., Kolb U.  (1995, ApJ, 439, 330-)
* Knigge C. (2006, MNRAS, 373, 484-)
* Knigge C., Baraffe I., Patterson J. (2011, ApJS, 194, 28-)                       
* Kudritzki R. P. & Reimers D. (1978, A&A, 70, 227-)   
* Kudritzki et al. (1989, A&A, 219, 205-)                                          
* Leung S. C., Nomoto K., Blinnikov S. (2019, ApJ, 887, 72-)                           
* Leung S. C., Blinnikov S., Ishidoshiro Koji et al. (2020, ApJ, 889, 75-)    
* Lubow  S. H. & Shu F. H. (1974, ApJ, 198, 383-)        
* Mestel L. (1952, MNRAS, 112, 583-)
* McDonald I. & Zijlstra A. A. (2015, MNRAS, 448, 502-)  
* Nieuwenhuijzen H. & de Jager C. (1990, A&A, 231, 134-)  
* Peters P. C. & Mathews J. (1963, Phys. Rev., 131, 435-)
* Peters P. C. (1964, Phys. Rev. 136, B1224)                                                   
* Railton A. D., Tout C. A., Aarseth S. J.  (2014, PASA, 31, 7-) 
* Rappaport S., Verbunt F., Joss P. C. (1983, ApJ, 275, 713-)
* Reimers, D. (1975, Memoires of the Societe Royale des Sciences de Liege, 8, 369-) 
* Ritter H. (1988, A&A, 202, 93-)
* Spera M. & Mapelli M., (2017, MNRAS, 470, 4739-)
* Schreiber M. R. et al. (2010, A&A, 513, L7)
* Schreiber M. R., Zorotovic M., Wijnen T. P. G. (2016, MNRAS, 455, L16)
* Schröder K. P., Cuntz, M. (2005, ApJ, 630, L73)
* Tout C. A. & Eggleton P. P. (1988, MNRAS, 231, 823-)                     
* Tout C. A., Aarseth S. J., Pols O. R., & Eggleton P. P. (1997, MNRAS, 291, 732-)  
* Ulrich R. K. & Burger H. (1976, ApJ, 206, 509-)                                                           
* Vassiliadis A. & Wood P. R. (1993, ApJ, 413, 641-)                                              
* Vink S. J., de Koter A., Lamers H. J. G. L. M. (2001, A&A, 369, 574-)                           
* Vink S. J. & de Koter A. (2005, A&A, 442, 587-)
* Zahn J. P. (1975, A&A, 41, 329-)      
* Zahn J. P. (1977, A&A, 57, 383-)        
* Zorotovic M. et al. (2016, MNRAS, 457, 3867-)          

******************************************************************************************

                                 ----------------------------
                                 | STELLAR EVOLUTION LEVELS |
                                 ----------------------------

******************************************************************************************

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
* nsflag  - Choices for how NS/BH masses are calculated
* Level A        = 0: Original remnant masses [Hurley et al. (2000)]
* Level B        = 1: FeNi core mass [Belczynski et al. (2002)]
* Level B        = 2: FeNi core mass [Belczynski et al. (2008)]
* Level B        = 3: Rapid SNe [Fryer et al. (2012)]
* Level B	     = 4: Delayed SNe [Fryer et al. (2012)]
* Level A        = 5: [Eldridge & Tout (2004)]
* psflag  - No, strong, weak or moderate P(I)SNe / PP(I)SNe
* Level A        = 0: No P(I)SNe / PP(I)SNe
* Level B	     = 1: Strong P(I)SNe / PP(I)SNe [Belczynski et al. (2016)]
* Level C	     = 2: Moderate P(I)SNe / PP(I)SNe [Leung et al. (2019)]
* Level C	     = 3: Weak P(I)SNe / PP(I)SNe [Leung et al. (2019)]
* ecflag  - Enables or disables ECSNe
* Level A        = 0: No ECSNe
* Level B	     = 1: Enables ECSNe [Belczynski et al. (2008)]
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
* bhflag - BH kicks and natal spins, same as for CC NSs but reduced for momentum cons. if fallback
* Level A        = 0: no BH kick.
* Level B	     = 1: same as for the regular NSs but scaled by fallback. 
* Level D	     = 2: Fallback as bhflag = 1 + BH Kerr Metric spin parameter 
                                                  MESA models [Belczynski et al. (2020)]
* Level D	     = 3: Fallback as bhflag = 1 + BH Kerr Metric spin parameter
                                                  Geneva models [Belczynski et al. (2020)]
* kmech - Kick mechanism for NSs and BHs [Fryer suggestions at around 2018]
* Level A        = 1: standard momentum-conserving 
* Level B	     = 2: convection-asymmetry-driven
* Level B	     = 3: collapse-asymmetry-driven
* Level C	     = 4: neutrino-driven
* disp - Dispersion in a Maxwellian velocity distribution for kick distributions (WDs,NSs,BHs)
* Level A        = 190 km/s following [Hobbs et al. (2005)]
* Level B        = 265 km/s following [Belczynski et al. (2008)]			
* WDSIG1 - kicks for He and COWDs
* Level B        = 2.0 km/s [Fellhauer et al. (2003)]
* WDSIG2 - kicks for ONeWDs 
* Level B        = 2.0 km/s [Fellhauer et al. (2003)]
* WDKMAX - maximum kick velocity for all WDs
* Level B        = 6.0 km/s [Fellhauer et al. (2003)]
* ECSIG - Electron capture supernova (ECSNe) or an accretion-induced supernove (AISNe)
* Level A        = 190 km/s following [Hobbs et al. (2005)]
* Level B        = 3.0 km/s [Gessner & Janka (2018)]
* CONVF - Convective boost factor larger CO core masses (Convection-asymmetry driven kick) 2 =< CONVF =< 10)
* Level B        = 5.0 
* MNUEFF -  - effective remnant mass beyond which the neutrino emission does not 
              enhance significantly as the remnant (baryonic) mass is increased 
			  (Neutrino-driven driven kick) 5 M* =< MNUEFF =< 10 M* 
* Level B        = 7.0 M*
* MNSTYP - typical mass of a neutron star with the input dispersion velocity 'disp'
* Level B        = 1.4 M*
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC                                                                                          
* mdflag - Calculate stellar wind mass loss                                                                   
* Level A        = 1 - SSE basic rates [Hurley et al. (2000)]
* Level A        = 2 - SSE + LBV added [Humphreys & Davidson (1994)]   
* Level B        = 3 - [Belczynski et al. (2010)].                           
* Level C        = 4 - [Belczynski et al. (2010)] no bi-stability jump.        
* Level D        = 5 - [Giacobbo et al. (2018)]                                                                                                                                                                      
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC                         

******************************************************************************************

                                 ------------------
                                 | OLD BSE OR SSE |
                                 ------------------

******************************************************************************************
Below is the original information on the SSE package by Jarrod Hurley

Created by Jarrod Hurley at the Institute of Astronomy, Cambridge, UK 
in collaboration with Onno Pols and Christopher Tout. 
12th February 2000. 

More information can be found in the paper: 

"Comprehensive analytic formulae for stellar evolution as a function 
 of mass and metallicity" 
 Hurley J.R., Pols O.R., Tout C.A., 2000, MNRAS, 315, 543. 

This reference should be used for any publications that utilise the 
SSE package. 

Any queries that are not answered by referring to the paper can be addressed 
to: jhurley@astro.swin.edu.au 

************************************************************************

Mass range:        0.1 -> 100 Msun 
Metallicity Range: 0.0001 -> 0.03 (0.02 is solar) 

************************************************************************

The SSE package contains the following FORTRAN files: 

sse.f       - Main routine. Evolves one star and creates data files. 
const_bse.h - parameter file 
deltat.f    - determines stellar evolution update timestep
evolv1.f    - routine that controls the evolution of each star 
evolve.in   - input file for sse.f 
hrdiag.f    - subroutine to decide which evolution stage the star is 
              currently at and then the appropriate luminosity, radius 
              and core mass are calculated 
kick.f      - generates supernova kick 
mlwind.f    - subroutine which contains the preferred mass loss prescription 
mrenv.f     - calculates envelope parameters
ran3.f      - random number generator
star.f      - subroutine which derives the landmark timescales and 
              luminosities that divide the various evolution stages. 
zcnsts.f  -   subroutine which sets all the constants of the formulae which 
              depend on metallicity so that there is no Z dependence 
              elsewhere 
zdata.h   -   data file which contains all the coefficient values 
zfuncs.f  -   contains all the formulae as a collection of separate functions 

and 

Makefile  - f77 compiler. Use command "make sse"

************************************************************************

The main routine sse.f contains comments that should (hopefully?)
make everything self-explanatory. It is simply an example to show how 
EVOLV1 should be used. 

In the case of EVOLV1 being called in a loop over many stars 
be careful to initialise each new star, i.e. 

mt = mass
kw = 1
tphys = 0.0 
epoch = 0.0
ospin = 0.0

However, the routine ZCNSTS only needs to be called each time you change
metallicity.

Note that the epoch is required because the physical time and the 
age of the star are not always the same. 
For example, when a star becomes a WD, at say time tWD, its' effective age
becomes zero because the WD evolution formulae start from t=0.0. Therefore
we set epoch = tWD and from then on the age of the star is age = t - epoch.
The same happens when the star becomes a naked helium star, NS or BH. The
epoch parameter is also very useful in binary evolution when a star needs    
to be rejuvenated or aged as a result of mass transfer.

You may not want to use sse.f at all and instead, for example, prefer to use 
EVOLV1 directly as the main routine. 
Also, you may want to utilise the individual subroutines in different ways. 
For example, if instead of actually evolving the stars all you want 
is an estimate of evolution timescales then, given the mass of a star 
(and mt=mass, kw=1), a call to STAR will return the array TSCLS 
which contains the necessary information. 

PROBLEMS: if the program stops with a 'FATAL ERROR' then more information 
          should be contained in the fort.99 file. When you have 
          identified the initial conditions that produce the error then 
          please contact me and I may help to fix the bug - assuming it 
          can be reproduced! 

************************************************************************

Definitions of the various data arrays are contained in the header of the 
subroutine where they are filled. A summary is also given here: 

*       ---------------------------------------------------------------------
       MASS    Initial stellar mass in solar units
       AJ      Current age in Myr
       MT      Current mass in solar units (used for R)
       TM      Main sequence lifetime
       TN      Nuclear burning lifetime assuming no further mass loss 
       TSCLS   Evolution timescales for different stages
       LUMS    Landmark luminosities 
       GB      Giant branch parameters
       ZPARS   Parameters for distinguishing various mass intervals
       R       Stellar radius in solar units
       KW      Evolution type (0 - 15).
       MC      Core mass in solar units 
*       ------------------------------------------------------------
 KW
              0 - deeply or fully convective low mass MS star
              1 - Main Sequence star
              2 - Hertzsprung Gap
              3 - First Giant Branch
              4 - Core Helium Burning
              5 - First Asymptotic Giant Branch
              6 - Second Asymptotic Giant Branch
              7 - Main Sequence Naked Helium star
              8 - Hertzsprung Gap Naked Helium star
              9 - Giant Branch Naked Helium star
             10 - Helium White Dwarf
             11 - Carbon/Oxygen White Dwarf
             12 - Oxygen/Neon White Dwarf
             13 - Neutron Star
             14 - Black Hole
             15 - Massless Supernova
*       ------------------------------------------------------------
 TSCLS (all timescales are in Myr units) 
              1; BGB              2; He ignition   3; He burning
              4; Giant t(inf1)    5; Giant t(inf2) 6; Giant t(Mx)
              7; FAGB t(inf1)     8; FAGB t(inf2)  9; FAGB  t(Mx)
             10; SAGB t(inf1)    11; SAGB t(inf2) 12; SAGB  t(Mx)
             13; TP              14; t(Mcmax)
*       ------------------------------------------------------------
 LUMS (all luminosities are in solar units) 
              1; ZAMS             2; End MS        3; BGB
              4; He ignition      5; He burning    6; L(Mx)
              7; BAGB             8; TP
*       ------------------------------------------------------------
 GB = giant branch parameters 
              1; effective A(H)   2; A(H,He)       3; B
              4; D                5; p             6; q
              7; Mx               8; A(He)         9; Mc,BGB
*       ------------------------------------------------------------
 ZPARS 
              1; M below which hook doesn't appear on MS, Mhook.
              2; M above which He ignition occurs non-degenerately, Mhef.
              3; M above which He ignition occurs on the HG, Mfgb.
              4; M below which C/O ignition doesn't occur, Mup.
              5; M above which C ignites in the centre, Mec.
              6; value of log D for M<= zpars(3)
              7; value of x for Rgb propto M^(-x)
              8; value of x for tMS = MAX(tHOOK,x*tBGB)
              9; constant for McHeIf when computing Mc,BGB, mchefl.
             10; constant for McHeIf when computing Mc,HeI, mchefl.
             11; hydrogen abundance.
             12; helium abundance.
             13; constant x in rmin = rgb*x**y used by LM CHeB.
             14; z**0.4 to be used for WD L formula.
*       ------------------------------------------------------------

************************************************************************

Below is the original information on the BSE package by Jarrod Hurley

Created by Jarrod Hurley at the Institute of Astronomy, Cambridge, UK 
in collaboration with Onno Pols and Christopher Tout. 
12th February 2000. 

IMPORTANT: This package must be used in conjunction with the SSE 
           package for evolving single stars. 

Information on the BSE package can be found in the paper: 

"Evolution of binary stars and the effect of tides on binary 
 populations" 
 Hurley J.R., Tout C.A., & Pols O.R., 2002, MNRAS, 329, 897. 

and more information on the SSE package can be found in the paper: 

"Comprehensive analytic formulae for stellar evolution as a function 
 of mass and metallicity" 
 Hurley J.R., Pols O.R., & Tout C.A., 2000, MNRAS, 315, 543. 

Any queries that are not answered by referring to these texts, or by 
reading the comments in the programs, can be addressed to: 
  jhurley@astro.swin.edu.au  

There have been some updates to the code subsequent to the publication 
of the BSE paper and these are documented in the header of the evolv2.f 
routine. 

************************************************************************

Stellar mass range: 0.1 -> 100 Msun 
Metallicity range:  0.0001 -> 0.03 (0.02 is solar) 
Period range:       all 
Eccentricity Range: 0.0 -> 1.0

************************************************************************

The BSE package contains the following FORTRAN files: 

bse.f       - Main routine. Evolves one binary and creates data files. 
const_bse.h - parameter file 
evolv2.f    - routine that controls the evolution of the binary 
binary.in   - input file for bse.f 
comenv.f    - common envelope evolution
corerd.f    - estimates the core radius of a giant-like star
deltat.f    - determines stellar evolution update timestep 
dgcore.f    - determines the outcome when two degenerate cores merge 
gntage.f    - calculates parameters of new star resulting from a merger 
hrdiag.f    - decides which evolution stage the star is
              currently at and then the appropriate luminosity, radius
              and core mass are calculated 
instar.f    - sets the collision matrix
kick.f      - generates supernova kick and adjusts orbital parameters 
mix.f       - models stellar collisions
mlwind.f    - contains the mass loss prescription 
mrenv.f     - calculates envelope parameters
ran3.f      - random number generator
rl.f        - calculates Roche-lobe radius 
star.f      - derives the landmark timescales and luminosities 
              that divide the various evolution stages. 
zcnsts.f    - sets all the constants of the formulae which depend on 
              metallicity (there is no Z dependence elsewhere) 
zdata.h     - contains all the coefficient values for zcnsts 
zfuncs.f    - all the formulae as a collection of separate functions 

and 

Makefile  - f77 compiler. Use command "make bse"

************************************************************************

The main routine bse.f contains comments that should (hopefully?)
make everything self-explanatory. It is simply an example to show how 
EVOLV2 should be used. 
Information is also contained in the headers of some routines. In particular, 
see bse.f for an explanation of the input.  

In the case of EVOLV2 being called in a loop over many stars 
be careful to initialise each new star, i.e. 

mass(i) = mass0(i)
kstar(i) = 1
epoch(i) = 0.0
ospin(i) = 0.0
tphys = 0.0 

as well as setting the masses (mass0), period (tb) and eccentricity (ecc). 

However, the routine ZCNSTS only needs to be called each time you change
metallicity.

You may not want to use bse.f at all and instead, for example, prefer to use 
EVOLV2 directly as the main routine. 
Also, you may want to utilise the individual subroutines in different ways. 

PROBLEMS: if the program stops with a 'FATAL ERROR' then more information 
          should be contained in the fort.99 file. When you have 
          identified the initial conditions that produce the error then 
          please contact me and I may help to fix the bug - assuming it 
          can be reproduced! 

Good luck!  

Jarrod Hurley, Cambridge Summer 2002
